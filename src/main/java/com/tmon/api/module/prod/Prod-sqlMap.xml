<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ProdMapper">


	<!-- TMON 배송지 등록 -->
	<insert id="insertTmonAddress" parameterType="hashMap">
		/* ProdMapper.insertTmonAddress */
			INSERT INTO tmon_address
		(
		  	sellercd, no, partnerNo, type, addressName, defaultAddress, zipcode, address, addressDetail, streetAddress, managerName, managerPhone, available, regdate, modifydate,shippolicy_no
		) VALUES (
		 	#{sellercd}::NUMERIC, #{no}, #{partnerNo}, #{type}, #{addressName}, false, #{zipCode}, #{address}, #{addressDetail}, #{streetAddress}, #{managerName}, #{managerPhone}, true, now(), now(), #{shippolicy_no}::NUMERIC
		)
	</insert>

	<!-- TMON 배송지 수정 -->
	<update id="updateTmonAddress" parameterType="hashMap">
		/* ProdMapper.updateTmonAddress */
		UPDATE tmon_address
		SET modifydate = now()
			,addressName	= #{addressName}
			,zipCode    	= #{zipCode}
			,address		= #{address}
			,addressDetail 	= #{addressDetail}
		WHERE no = #{no}::NUMERIC
	</update>


    <!-- tmon 배송지 조회 -->
    <select id="selectTmonAddress" parameterType="hashMap" resultType="hashMap">
        SELECT
                addressName,
                defaultAddress,
                zipcode,
                address,
                addressdetail,
                streetaddress,
                managerName,
                managerPhone,
                available,
                no,
                partnerNo,
                regdate,
                modifydate
        FROM tmon_address
        WHERE sellercd = #{sellercd}::numeric
        and   type     = #{type}
		<if test="sellercd == '435709'">
			AND shippolicy_no = #{shippolicy_no}::NUMERIC
		</if>
    </select>

	<!-- TMON 배송템플릿 등록 -->
	<insert id="insertTmonDeliveryTemplate" parameterType="hashMap">
	/* ProdMapper.insertTmonDeliveryTemplate */
		INSERT INTO tmon_deliverytemplate
		(
		  	sellercd, deliveryTemplateName , deliverytemplateno, bundledDeliveryAble ,deliveryFeePolicy ,deliveryFee ,deliveryFeeFreePrice ,productType ,deliveryType ,ddayDeliveryTime ,longDistanceDeliveryAvailable ,longDistanceDeliveryPrepay ,longDistanceDeliveryFeeJeju ,longDistanceDeliveryFeeExcludingJeju ,partnerDeliveryAddressNo ,partnerReturnAddressNo ,regdate,modifydate
		) VALUES (
		 	#{sellercd}::NUMERIC, #{deliveryTemplateName}, #{deliveryTemplateNo	}, #{bundledDeliveryAble},#{deliveryFeePolicy},#{deliveryFee},#{deliveryFeeFreePrice},#{productType},#{deliveryType},#{ddayDeliveryTime},#{longDistanceDeliveryAvailable},#{longDistanceDeliveryPrepay},#{longDistanceDeliveryFeeJeju},#{longDistanceDeliveryFeeExcludingJeju},#{partnerDeliveryAddressNo},#{partnerReturnAddressNo},now(),now()
		)
	</insert>

	<!-- TMON 배송템플릿 조회 -->
	<select id="selectTmonDeliveryTemplate" parameterType="hashMap" resultType="hashMap">
        SELECT
                deliverytemplateno
        FROM tmon_deliverytemplate
        WHERE deliverytemplatename = #{deliveryTemplateName}
    </select>

	<!-- tmon 고시정보 조회 -->
	<select id="selectTmonNoti" parameterType="hashMap" resultType="hashMap">
		SELECT  tnotigroupname
				,notiname
		FROM tmon_product_noti
		WHERE notigroupcd = #{notigroupcd}
	</select>

    <!-- TMON 상품등록 대상 목록 조회 -->
	<select id="selectNewProducts" parameterType="hashMap" resultType="hashMap"> 
	/* ProdMapper.selectNewProducts */
		SELECT cp.productcd
			 , cp.sellercd
		     , coalesce(td.deliverycorp,'직접배송') AS deliverycorp
			 , 'N' AS tmon
		  FROM comm_sellers cs
		  INNER JOIN comm_products cp
			 ON cp.sellercd = cs.sellercd
			 AND to_char(cp.modifydate,'yyyy') > '2022'
			 AND (coalesce(cp.confirm_yn,'N') = 'Y' or cp.sellercd = '435709')
			 /*AND cp.productcd in ('70404840','70281183','70139774','64997172','73184962','73008988','72905150','69433354','72537235','69221406','72476569','64645538','64645534','64645458','71732002','64394958','64357492','67877388','67749884','67749669','67749646','67617097','67617090','67584887','71197835','63959166','63957694','63956351','67185056','57642898','57555706','57521131','57518246','63559192','52676787','52612188','58898696','52610336','52609704','53520826','55867776','52605823','52589938','52588616','52581165','52577052','52576620','52576613','52576611','52565377','52565298','52563759','52563691','52563287','52560094','52560080','52558817','55796269','57145907','68341398','51404384','51404100','50425053','61519316','58590773','58578967','58547508','60001158','61159648','53046545','50057061','62361786','49994855','49994853','50898859','51959679','51958638','49974821','49974806','49974805','49974801','62221814','57972389','57972386','57972351','49146857','49146819','57940901','51854290','51854243','52840666','50660049','52805074','52805072','52805063','48594607','68341685','68463629','31046720','68463810',
		'66866915','66864297','66864202','66861964','75471857','66432146','66431474','72359482','72356408','72349669','72106280','72106028','72105780','68575010','74800153','74800145','71591489','74311671','65421243','70816551','73683925','73456704','53689808','59878205','51165672','51165333','51165190','49148571','49148505','60684436','47778563','58476940','47521684','47527444','72985811','47500872','48380224','47374836','46815303','50053322','49890327','61215279','46270028','60035991','43787972','59945082','66698677','43788484','43493219','44355130','73283657','73284027','74863095','73283472','74863153','74903450','74924576','74903497','74924566','74418271','74416839','75079901','74415904','74607161','74532870','74606097','75072477','75072292','51233932','73242711','61938339','50987892','72721724','71234091','70970911','70978616','70116284','74209816','74209791','74209763','74209757','74209747','74209737','74209717','74209712','74209690','37478050','41911902','38106784','38273686','8228767','48454728','38191780','39011285','72987508','65659098','51409013','72545501','71238605','70495150','73167496','73167642','73001998','73503398','70280063','71830090','73802628','73802251','73801706','73801296','73800763','73800070','73799609','73797088','64981915','64893734','65741964','64201784','64201671','65576669','65326290','65265708','65222179','65211107')*/
			<if test="productCd != null and productCd != ''">
				AND cp.productcd = #{productCd}::NUMERIC
			</if>
			<if test="productCd == null and productCd == ''">
				AND cp.tmon = 'N'						/* N : 신규 */
			</if>

			AND cs.tmon IN ('Y', 'R')
			AND cp.status = '02'					/* STATUS 02 : 판매중 */
			AND cs.seller_type_cd='10'				/* seller_type_cd  : 10:사업자 판매회원, 20:글로벌 판매회원(해외사업자) */
			AND cs.OVERSEAS_GOODS_SALES_YN ='N'		/* OVERSEAS_GOODS_SALES_YN : Y:해외배송,N:국내배송 */
		  inner JOIN tmon_deliverycorp td on cs.shippingcompanycd = td.mdeliverycorpcd::NUMERIC
		  /*INNER JOIN tmon_categories sc
		 	 ON sc.catecd = cp.catecd
		  INNER JOIN COMM_CATEGORIES cc4 ON  cp.cateCd = cc4.cateCd
		  INNER JOIN COMM_CATEGORIES cc3 ON  cc3.cateCd = cc4.refCateCd
		  INNER JOIN COMM_CATEGORIES cc2 ON  cc2.cateCd = cc3.refCateCd
		  INNER JOIN COMM_CATEGORIES cc1 ON  cc1.cateCd = cc2.refCateCd and cc1.cateCd not in (7,8)*/
		 WHERE 1=1
		   AND NOT EXISTS(select 1 from tmon_products where productcd = cp.productcd )
		   AND cp.productname not like '%로얄%'
		   AND cp.overseas_goods_sales_yn = 'N'
		   AND coalesce(cp.limitcntuseyn,'N') = 'N'
		   /*AND cc2.cateCd != '45'
		   AND ( cp.isusedproductoption = 0 
				  OR (cp.ISUSEDPRODUCTOPTION IN (1,2) AND cp.productcd NOT IN (
						SELECT productcd
						  FROM comm_product_opts sub 
						 WHERE cp.productcd = sub.productcd 
						   AND sub.ISAVA = '02'
						   AND (sub.OPTIONGROUPNO != 1
								OR sub.optionprice > 0
								)
						 LIMIT 1
					 ))
				)
		   AND ((cp.shippingfee = 0 OR cp.shippingfee IS NULL) OR (cp.shippingfee > 0 AND cp.supplyprice >= 7000))
		   AND cp.shippingfeepaytype != '03'*/
		   --ORDER BY cp.productcd DESC
		   LIMIT 200 OFFSET 0
	</select>
	
	<!-- TMON 상품수정 대상 목록 조회 -->
	<select id="selectUpdatedProducts" parameterType="hashMap" resultType="hashMap" fetchSize="1000">
	/* ProdMapper.selectUpdatedProducts */
		SELECT cp.productcd
			 , cp.sellercd
		     , cp.status
		     , coalesce(td.deliverycorp,'직접배송') AS deliverycorp
			 , cp.tmon
			 , coalesce((select max(optiongroupno) from comm_product_opts where productcd = cp.productcd and isava in ('02','03')),1) AS optgroupcnt
		  FROM comm_sellers cs
			   INNER JOIN comm_products cp
				 ON cp.sellercd = cs.sellercd
				/* AND cp.productcd in ('73184523','52962712','14702128','75990925','64155688','71641840','75524444','75664851','74862228','74861450','74860578','74230763','74229610','74229916','55265287','64209793','75685132','64155506','76283746','72562665','46666828','54201099','75577088','66133307','66151750','71855605','69663542','69661030','76168123','75822913','53315167','53460679','70019945','72537530','75192225','75175979','67854021','67853906','67853458','67853226','72480942','72481043','72480834','71186915','71187719','71188444','71188229','71193469','71189049','71189594','73961742','73960693','74526907','73959212','73954265','75778736','76136372','76137135','76135934','75728759','76136975','65463950','75752985','75578466','75612511','75612680','75624611','75625897','75630805','75631020','75631325','75631567','75674748','75674229','75673737','68688520','68688510','68165670','68165667','68165668','76206944','75672983','75671982','75670534','75670265','75670242','75669141','75669022','75668813','75565048','75563940','75563899','75563480','75614441','75614361','75611693','75611615','75611332','75611291','74618890','75169530','75840847','59654358','75679489','75798491','75754040','75741055','75740945','75740712','75740707','75680680','75680195','75678783','76123688','75903960','75903865','75842203','75827802','75825297','76271268','76271059','76270806','76270528','76269790','76265941','69921825','75856397','75652493','72101556','54049712','61890304','61932920','68731239','65762955','62576156','55949744','73560921','49546629','57966075','45192730','45269072','74293051','72545480','45486976','73001998','73000021','73233873','73002711','73002368','73002861','51165672','51165333','51165255','51165368','51165190','74924587','74924558','74863110','74863153','75573285','75573303','74295360','75994323','44974768','74924576','74924566','75803806','57142803','75079901','75643181','72198350','62162930','62163022','49151735','49148688','49149481','49148571','50070104','67583390','67583487','62502009','70378053','66937196','66936873','47603561','58897010','73019572','73561902','73966344','73167627','75820801','75147070','71546370','70354229','70864109','70355997','70357978','72385679','75518845','75517685','70395436','70394342','70394156','70393540','72494250','72494173','72493752','72493545','72217419','72217238','72217061','72216656','72216358','72216037','72215885','72215637','75059602','75059450','75053804','75053415','75053174','75053028','75052804','75052637','75653495','76309224','75788314','75788781','76278423','75301832','76354291','65156953','65583885','65583670','65583577','76282750','65863828','61780101','61779820','63634837','61774789','36906312','73356895','74165997','73297709','72871570','72871436','72871398','72196365','61780290','47527444','55117548','48025370','47372480','47371925','47704398','47527319','47521508','48155213','48438269','46836057','46814321','46815296','46815299','76397738','64201784','64201671','75718672','75717958','75717751','75717434','75717052','75716425','75715801','75715790','72435907','40489598','51409013','51408120','65659098','40489661','40489647','70648759','70648934','73773039','73785387','73785934','73792075','73792644','73793051','73795295','75085442','75085663','75085934','75086136','75086598','75086693','75086856','75087089','73799609')*/
				<if test="productCd != null and productCd != ''">
					AND cp.productcd = #{productCd}::NUMERIC
				</if>
				AND cp.tmon = 'U'						/* N : 수정 */
				--AND (cp.shippingfee = 0  OR (cp.shippingfee > 0 AND cp.supplyprice >= 7000))
				AND cs.tmon IN ('Y', 'R')
				AND cs.seller_type_cd='10'				/* seller_type_cd  : 10:사업자 판매회원, 20:글로벌 판매회원(해외사업자) */
				AND cs.OVERSEAS_GOODS_SALES_YN ='N'		/* OVERSEAS_GOODS_SALES_YN : Y:해외배송,N:국내배송 */
			   inner JOIN tmon_deliverycorp td on cs.shippingcompanycd = td.mdeliverycorpcd::NUMERIC
			  --INNER JOIN tmon_categories sc
			  --	 ON sc.catecd = cp.catecd
			  --	AND sc.api_YN ='Y'
		 WHERE 1=1
		 AND EXISTS(select 1 from tmon_products where productcd = cp.productcd )
		   <!-- AND cs.sellercd in (select sellercd from tmon_sellers) -->
		  /* AND ( cp.isusedproductoption = 0
				  OR (cp.ISUSEDPRODUCTOPTION IN (1,2) AND cp.productcd NOT IN (
						SELECT productcd
						  FROM comm_product_opts sub
						 WHERE cp.productcd = sub.productcd
						   AND sub.ISAVA = '02'
						   AND (sub.OPTIONGROUPNO != 1
								OR sub.optionprice > 0
								)
						 LIMIT 1
					 ))
				)
		   AND cp.shippingfeepaytype != '03'*/
			  LIMIT 500 OFFSET 0
	</select>

	<!-- TMON 상품수정 대상 목록 조회 -->
	<select id="selectUpdatedProductsDelChk" parameterType="hashMap" resultType="hashMap" fetchSize="1000">
		/* ProdMapper.selectUpdatedProductsDelChk */
		SELECT cp.productcd
		, cp.sellercd
		, cp.status
		FROM comm_sellers cs
		INNER JOIN comm_products cp
		ON  cp.sellercd = cs.sellercd
		AND cp.productcd = #{productCd}::NUMERIC
		AND cs.tmon IN ('D')
		AND cs.seller_type_cd='10'				/* seller_type_cd  : 10:사업자 판매회원, 20:글로벌 판매회원(해외사업자) */
		AND cs.OVERSEAS_GOODS_SALES_YN ='N'		/* OVERSEAS_GOODS_SALES_YN : Y:해외배송,N:국내배송 */
		WHERE 1=1
		AND EXISTS(select 1 from tmon_products where productcd = cp.productcd )
		LIMIT 500 OFFSET 0
	</select>



	<!-- TMON 상품수정 판매 일시 중지 처리  -->
	<select id="selectSetStopProduct" parameterType="hashMap" resultType="hashMap">
		/* ProdMapper.selectSetStopProduct */
		SELECT C.productcd
		FROM comm_sellers S
		inner join comm_products p on S.sellercd = P.sellercd
		inner join tmon_products C on P.productcd = C.productcd and coalesce(C.status,'Y') != 'D'
		WHERE S.tmon ='D'
		limit 500
	</select>
	
	<!-- TMON 상품금액수정(재고, 가격, 상태변경)건 조회 -->
	<select id="selectProductsChange" parameterType="hashMap" resultType="hashMap" fetchSize="500">
	/* ProdMapper.selectProductsChange */
		WITH WITH_TABUP AS (
			WITH  WITH_TAB AS (
				SELECT p.productcd
					 , p.tmon as tmon2
					 , 'price' as gubun
				  FROM comm_products_price_change p
					   INNER JOIN comm_sellers s ON p.sellercd = s.sellercd and (s.tmon = 'Y' or s.tmon = 'R')
				 WHERE p.tmon = 'U'
				 UNION 
				SELECT p.productcd
					 , p.tmon as tmon2
					 , 'qty' as gubun
				  FROM comm_products_qty_change p
					   INNER JOIN comm_sellers s on p.sellercd = s.sellercd and (s.tmon = 'Y' or s.tmon = 'R')
				 WHERE p.tmon = 'U'
				 UNION
				SELECT p.productcd
					 , p.tmon as tmon1
					 , 'status' as gubun
				  FROM comm_products_status_change p
					   INNER JOIN comm_sellers s on p.sellercd = s.sellercd and (s.tmon = 'Y' or s.tmon = 'R')
				 WHERE p.tmon = 'U'
			)
			SELECT cp.*
				 , wt.tmon2
				 , wt.gubun
			  FROM comm_products cp, WITH_TAB wt
			 WHERE cp.productcd = wt.productcd
			   AND cp.api_yn = 'Y'
			   AND ((cp.shippingfee = 0 OR cp.shippingfee IS NULL) OR (cp.shippingfee > 0 AND cp.supplyprice >= 7000))
		)
		SELECT sp.productno
			 , wu.productcd
			 , wu.sellingprice
			 , wu.prdqty
			 , wu.status
			 , wu.tmon2
			 , string_agg(DISTINCT wu.gubun, ',') as gubun
		  FROM tmon_products sp, WITH_TABUP wu
		 WHERE sp.productcd = wu.productcd
	  GROUP BY sp.productno, wu.productcd, wu.sellingprice, wu.prdqty, wu.status, wu.tmon2
		 limit 500
	</select>



	<!-- TMON 카테고리 조회 -->
	<select id="selectCategory" parameterType="hashMap" resultType="hashMap">
		/* ProdMapper.selectCategory */
		SELECT
			   tmoncatecd
			 , tmoncatenm
		FROM tmon_categories
		WHERE catecd = #{catecd}::NUMERIC
		LIMIT 1
	</select>

	
	<!-- 셀러 판매/품절 대상 조회 -->
	<select id="selectModifiedSellerProduct" parameterType="hashMap" resultType="hashMap"> 
	/* ProdMapper.selectModifiedSellerProduct */
		WITH WITH_TABUP AS (
			WITH  WITH_TAB AS (
				SELECT sellercd
					 , tmon as sellertmon
				  FROM comm_sellers 
				 WHERE tmon IN ('D')
			)
			SELECT B.*
				 , A.*
			  FROM comm_products A
				 , with_tab B
			 WHERE A.sellercd = B.sellercd

		)
		SELECT C.productno
			 , D.* 
		  FROM tmon_products C
			 , with_tabup D
		 WHERE C.productcd = D.productcd
		   AND coalesce(D.sellertmon,'') != coalesce(C.tmon,'')
		 limit 200
	</select>
	
	<!-- 셀러 상품삭제건 조회 -->
	<select id="selectDeletedSellerProduct" parameterType="hashMap" resultType="hashMap">
	/* ProdMapper.selectDeletedSellerProduct */
		WITH WITH_TABUP AS (
			WITH  WITH_TAB AS (
				SELECT sellercd
					 , 'D' as sellertmon
				  FROM comm_sellers 
				 WHERE tmon IN ('Y','R') 
				   and shippingcompanycd is not null 
				   and returnaddress1 is not null
			)
			SELECT B.*
				 , A.*
			  FROM comm_products A
				 , with_tab B
			 WHERE A.sellercd = B.sellercd
			   AND A.status in ('01','03','04')
		)
		SELECT C.productno
			 , C.tmon
			 , D.* 
		  FROM tmon_products C
			 , with_tabup D
		 WHERE C.productcd = D.productcd
		   AND coalesce(D.sellertmon,'') != coalesce(C.tmon,'')
		 limit 200
	</select>

	<!-- 멸치 상품 조회 -->
	<select id="selectProducts" parameterType="hashMap" resultType="hashMap"> 
		/* ProdMapper.selectProducts */
		SELECT *
		  FROM comm_products
		 WHERE productcd = #{productcd}::NUMERIC
	</select>

	<!-- 멸치 상품옵션 그룹(section)정보 조회 -->
	<select id="selectCommProductOptGroup" parameterType="hashMap" resultType="hashMap">
	/* ProdMapper.selectCommProductOptGroup */
			SELECT optiongroupno
				 , optiongroupname
			  FROM comm_product_opts cpo
			 WHERE productcd = #{productcd}::NUMERIC
			   AND isava in ('02','03')
			GROUP BY optiongroupno ,optiongroupname
			ORDER by 1
	</select>

	<!-- 멸치 상품등록시 옵션 정보 조회 -->
	<select id="selectCommProductOpts" parameterType="hashMap" resultType="hashMap">
	/* ProdMapper.selectCommProductOpts */
			SELECT productoptioncd
				 , optiongroupno
				 , optiongroupname
				 , coalesce(optionitem,'') AS optionitem
				 , coalesce(' '||optionitemdetail,'') AS optionitemdetail
				 , coalesce(optionprice,0) as optionprice
				 , coalesce(optionqty, 999) AS optionqty
				 , isava as isava
			  FROM comm_product_opts cpo
			 WHERE productcd = #{productcd}::NUMERIC
			   AND isava in ('02','03')
			ORDER by optiongroupno,productoptioncd,optionitem
	</select>
	<!-- 멸치 상품수정시 옵션 정보 조회 -->
	<select id="selectCommProductEditOpts" parameterType="hashMap" resultType="hashMap">
		/* ProdMapper.selectCommProductEditOpts */
		SELECT cpo.productoptioncd
			 , cpo.optiongroupno
			 , cpo.optiongroupname
			 , coalesce(cpo.optionitem,'') AS optionitem
			 , coalesce(' '||cpo.optionitemdetail,'') AS optionitemdetail
			 , coalesce(cpo.optionprice,0) as optionprice
			 , coalesce(cpo.optionqty, 999) AS optionqty
			 , cpo.isava as isava
		FROM comm_product_opts cpo
		inner join tmon_product_opt tpo
		  on   tpo.productcd = cpo.productcd
		  and  tpo.productoptioncd  like cast(cpo.productoptioncd as text)||'%'
		WHERE cpo.productcd = #{productcd}::NUMERIC
		ORDER by cpo.optiongroupno,cpo.productoptioncd,cpo.optionitem
	</select>

	<!-- TMON 브랜드 조회 -->
	<select id="selectBrands" parameterType="hashMap" resultType="hashMap">
		SELECT brandcd
			 , brandname
			 , tmonbrandcd
		  FROM tmon_brands 
		 WHERE brandcd = #{brandcd}::NUMERIC
		 limit 1
	</select>
	
	<!-- TMON 상품 목록 조회 -->
	<select id="selectTmonProducts" parameterType="hashMap" resultType="hashMap"> 
	/* ProdMapper.selectTmonProducts */
		SELECT productcd,  productno,  supplyprice,  tmon,  coalesce(status,'Y') as status, optgroupcnt
		  FROM tmon_products
		 WHERE 1=1
		 <if test="productcd != null and productcd != ''">
		   AND productcd = #{productcd}::NUMERIC
		 </if>
		 <if test="productno != null and productno != ''">
		   AND productno = #{productno}::NUMERIC
		 </if>
	</select>
	
	<!-- TMON 상품 수정 -->
	<update id="updateTmonProducts" parameterType="hashMap">
	/* ProdMapper.updateTmonProducts */
		UPDATE tmon_products
		   SET modifydate = now()
		   <if test="tmon != null and tmon != ''">
		     , tmon = #{tmon}
		   </if>
		   <if test="supplyprice != null and supplyprice != ''">
		     , supplyprice = #{supplyprice}::NUMERIC
		   </if>
		 WHERE productcd = #{productcd}::NUMERIC
	</update>

	<!-- TMON 상품 판매중지  수정 -->
	<update id="updateTmonProductsPause" parameterType="hashMap">
		/* ProdMapper.updateTmonProductsPause */
		UPDATE tmon_products
		SET modifydate = now()
		,status = 'D'
		WHERE productcd = #{productcd}::NUMERIC
	</update>
	<!-- TMON 상품 판매중지  수정 -->
	<update id="updateTmonProductsResume" parameterType="hashMap">
		/* ProdMapper.updateTmonProductsResume */
		UPDATE tmon_products
		SET modifydate = now()
		  ,status = ''
		WHERE productcd = #{productcd}::NUMERIC
	</update>

	
	<!-- TMON 업체 배송비 정책 조회 -->
	<select id="selectTmonShippingPolicy" parameterType="hashMap" resultType="hashMap"> 
	/* ProdMapper.selectTmonShippingPolicy */
		SELECT shppcstid as shppcstid
		  FROM tmon_shipping_policy 
		 WHERE shppcstplcydivcd = #{shppcstPlcyDivCd}
		   AND shppcstaplunitcd = #{shppcstAplUnitCd}
		   AND prpaycoddivcd = #{prpayCodDivCd}
		   AND shppcst = #{shppcst}::NUMERIC
		<choose>
			<when test="shppcstExmpCritnAmt != null and shppcstExmpCritnAmt != ''">
				AND shppcstexmpcritnamt = #{shppcstExmpCritnAmt}::NUMERIC
			</when>
			<otherwise>
				AND shppcstexmpcritnamt IS NULL
			</otherwise>
		</choose>
		 LIMIT 1	
	</select>
	
	<!-- TMON 업체 배송비 정책 조회 -->
	<insert id="insertTmonShippingPolicy" parameterType="hashMap">
	/* ProdMapper."insertTmonShippingPolicy" */
		INSERT INTO tmon_shipping_policy
		(
		  shppcstid 
		, shppcstplcydivcd
		, shppcstaplunitcd
		, prpaycoddivcd
		, shppcstexmpcritnamt
		, shppcst
		, regdate
		) VALUES (
		  #{shppcstId}
		, #{shppcstPlcyDivCd}
		, #{shppcstAplUnitCd}
		, #{prpayCodDivCd}
		, #{shppcstExmpCritnAmt}
		, #{shppcst}  
		, now()
		)
	</insert>
	
	<!-- 멸치 판매자 정보 조회 -->
	<select id="selectSeller" parameterType="hashMap" resultType="hashMap"> 
	/* ProdMapper.selectSeller */
		SELECT A.sellercd
			 , A.ebay as sebay
			 , A.sellerid
			 , A.entertype
			 , A.businame
			 , A.businum
			 , A.busitype
			 , A.busicate

			 ,coalesce(C.postcode1, A.postcode1) AS postcode1
			 ,coalesce(C.postcode2, COALESCE(A.postcode2,'')) AS postcode2
			 ,coalesce(C.address1, A.address1) AS address1
			 ,coalesce(C.address2, A.address2) AS address2
			 ,coalesce(C.returnpostcode1, A.returnpostcode1) AS returnpostcode1
			 ,coalesce(C.returnpostcode2, COALESCE(A.returnpostcode2,'')) AS returnpostcode2
			 ,coalesce(C.returnaddress1, A.returnaddress1) AS returnaddress1
			 ,coalesce(C.returnaddress2, A.returnaddress2) AS returnaddress2

			 , A.shippingtype
			 , A.shippingcompanycd
			 , A.seller_type_cd
			 , A.tel
			 , A.phonenumber
			 , COALESCE(A.notice_img,'N') AS noticeimg
			 , A.notice_name AS noticename
		  FROM comm_sellers A
		  LEFT JOIN mh_shippingplace C on A.sellercd = C.sellercd AND C.shippolicy_no = #{shippolicy_no}::NUMERIC
		 WHERE A.sellercd =  #{sellercd}::NUMERIC
		   AND A.returnaddress1 is not null
	</select>
	
	<!-- tmon 배송정책 조회 -->
	<select id="selectTmonDeliveryPolicy" parameterType="hashMap" resultType="hashMap"> 
		SELECT doroaddrid
			 , jibunaddrid
			 , grpaddrid
			 , sellercd
			 , zipcd
			 , addrlcantnm
			 , addrbasc
			 , addrdtl 
			 , cnts
		 FROM tmon_delivery_policy
		WHERE sellercd =  #{sellercd}::NUMERIC
		  AND zipcd = #{zipcd}
		  AND gubuncd = #{gubuncd}
		LIMIT 1
	</select>
	
	<!-- tmon 배송정책 등록 -->
	<insert id="insertTmonDeliveryPolicy" parameterType="hashMap">
	/* ProdMapper.insertTmonDeliveryPolicy */
		INSERT INTO tmon_delivery_policy
		(
		  grpaddrid 
		, doroaddrid
		, jibunaddrid
		, gubuncd
		, sellercd
		, zipcd
		, addrlcantnm
	 	, addrbasc
	 	, addrdtl 
	 	, cnts
		, regdate
		, modifydate
		) VALUES (
		  #{grpaddrid}
		, #{doroaddrid}
		, #{jibunaddrid}
		, #{gubuncd}
		, #{sellercd}::NUMERIC
		, #{zipcd}
		, #{addrlcantnm}
		, #{addrbasc}
		, #{addrdtl}
		, #{cnts}
		, now()
		, now()
		)
	</insert>
	
	<update id="updateTmonDeliveryPolicy" parameterType="hashMap">
	/* ProdMapper.updateTmonDeliveryPolicy */
		UPDATE tmon_delivery_policy
			SET grpaddrid = #{grpaddrid}
			  , doroaddrid = #{doroaddrid}
			  , jibunaddrid = #{jibunaddrid}
			  , addrlcantnm = #{addrlcantnm}
	 		  , addrbasc = #{addrbasc}
	 		  , addrdtl = #{addrdtl}
	 		  , cnts = #{cnts}
			  , modifydate = now()
		  WHERE sellercd =  #{sellercd}::NUMERIC
			AND zipcd = #{zipcd}
			AND gubuncd = #{gubuncd}
	</update>
	

		
	<!-- tmon 상품등록 -->
	<insert id="insertTmonProducts" parameterType="hashMap">
	/* ProdMapper.insertTmonProduct */
		INSERT INTO tmon_products  
		(
			 productno
			, productcd
			, regdate
			, modifydate
			, supplyprice
			, optgroupcnt
		) VALUES (
			  #{productno}::NUMERIC
			, #{productcd}::NUMERIC
			, now()
			, now()
			, #{supplyprice}::NUMERIC
			, #{optgroupcnt}::NUMERIC
		)
	</insert>

	<!-- tmon 상품옵션 조회 -->
	<select id="selectTmonProductOpt" parameterType="hashMap" resultType="hashMap">
	/* ProdMapper.selectTmonProductOpt */
		SELECT productno
			 , productoptionno
			 , productoptioncd
			 , isava
		  FROM tmon_product_opt
		 WHERE productcd = #{productcd}::NUMERIC
		   AND isava = 'Y'
	</select>
	
	<!-- tmon 상품옵션 업데이트 -->
	<update id="updateTmonProductOpt" parameterType="hashMap">
	/* ProdMapper.updateTmonProductOpt */
		UPDATE tmon_product_opt
			SET isava = #{isava}::TEXT
			  , optionqty = #{optionqty}::NUMERIC
			  , modifydate = now()
		WHERE productcd = #{productcd}::NUMERIC
		  AND uitemid = #{uitemid}::TEXT
	</update>
	
	<!-- tmon 상품옵션 업데이트 -->
	<update id="updateTmonProductOptByTempUitemId" parameterType="hashMap">
	/* ProdMapper.updateTmonProductOpt */
		UPDATE tmon_product_opt
			SET isava = #{isava}::TEXT
			  , modifydate = now()
			<if test="productno != null and productno != ''">
			  , productno = #{productno}::TEXT
			</if>  
			<if test="uitemid != null and uitemid != ''">
			  , uitemid = #{uitemid}::TEXT
			</if>
		WHERE productcd = #{productcd}::NUMERIC
		  AND uitemid = #{tempUitemId}::TEXT
	</update>
	
	<!-- tmon 상품 임시옵션 삭제 -->
	<update id="deleteTempTmonProductOpt" parameterType="hashMap">
	/* ProdMapper.deleteTempTmonProductOpt */
		DELETE FROM tmon_product_opt
		WHERE productcd = #{productcd}::NUMERIC
		  AND uitemid like 'temp%'
	</update>
	
	<!-- tmon 상품옵션 추가 -->
	<insert id="insertTmonProductOpt" parameterType="hashMap">
	/* ProdMapper.insertTmonProductOpt */
		INSERT INTO tmon_product_opt  
		(
			  productno
			, productcd
			, productoptioncd
			, productoptionno
			, optionprice
			, isava
			, optionqty
			, regdate
			, modifydate
		) VALUES (
			  #{productno}::NUMERIC
			, #{productcd}::NUMERIC
			, #{productoptioncd}::TEXT
			, #{productoptionno}::NUMERIC
			, #{optionprice}::NUMERIC
			, #{isava}::TEXT
			, #{optionqty}::NUMERIC
			, now()
			, now()
		)
	</insert>
	
	<!-- tmon 상품  정보 수정 -->
	<update id="updateProducts" parameterType="hashMap">
	/* ProdMapper.updateProducts */
		UPDATE comm_products
			SET tmon = #{tmon}
		WHERE productcd = #{productcd}::NUMERIC
	</update>     
	
	<!-- 상품금액변경 결과 저장 -->
	<update id="updateProductPriceChange" parameterType="hashMap">
	/* ProdMapper.updateProductPriceChange */
		UPDATE comm_products_price_change
		   SET tmon = #{tmon}
		 WHERE productcd = #{productcd}::NUMERIC
	</update>
	
	<!-- 상품수량변경 결과 저장 -->
	<update id="updateProductQtyChange" parameterType="hashMap">
	/* ProdMapper.updateProductQtyChange */
		UPDATE comm_products_qty_change
		   SET tmon = #{tmon}
		 WHERE productcd = #{productcd}::NUMERIC
	</update>
	
	<!-- 상품상태변경 결과 저장 -->
	<update id="updateProductStatusChange" parameterType="hashMap">
	/* ProdMapper.updateProductStatusChange */
		UPDATE comm_products_status_change
		   SET tmon = #{tmon}
		 WHERE productcd = #{productcd}::NUMERIC
	</update>
	

	
	<!-- MH 주문코드 조회 -->
	<select id="selectOrders" parameterType="hashMap" resultType="hashMap"> 
	/* ProdMapper.selectOrdersMapping */
		SELECT m_ordercd
		  FROM comm_orders
		 WHERE ordercd = #{ordercd}::TEXT
		  AND sitename = #{sitename}
	</select>
	
	<!-- QnA 질문 목록 조회 -->
	<select id="selectQnaQuestionDetail" parameterType="hashMap" resultType="hashMap"> 
	/* ProdMapper.selectQnaQuestionDetail */
		SELECT *
		  FROM comm_qna_products_question
		 WHERE api_id = #{api_id}::TEXT
		   AND sitename = #{sitename}
	</select>
	
	<!-- QnA 질문 등록 -->  
	<insert id="insertQnaQuestion" parameterType="hashMap">
	/* ProdMapper.insertQnaQuestion */
		INSERT INTO comm_qna_products_question  
		(
			  subject
			, contents
			, productcd
			, m_productcd
			, ordercd
			, m_ordercd
			, username
			, qnatype
			, api_id
			, api_seq
			, sitename
			, regdate
			, apiindexing
			, indexingdate
		) VALUES (
			  #{subject}
			, #{contents}
			, #{productno}
			, #{m_productcd}
			, #{ordercd}
			, #{m_ordercd}
			, #{username}
			, #{qnatype}
			, #{api_id}
			, #{api_seq}
			, #{sitename}
			, now()
			, 'N'
			, now()
		)
	</insert>
	
	<!-- QnA 질문 수정 -->  
	<update id="updateQnaQuestion" parameterType="hashMap">
	/* ProdMapper.updateQnaQuestion */
		UPDATE comm_qna_products_question
			SET subject = #{subject}
			, contents = #{contents}
			, productcd = #{productno}
			, m_productcd = #{m_productcd}
			, ordercd = #{ordercd}
			, m_ordercd = #{m_ordercd}
			, username = #{username}
			, qnatype = #{qnatype}
			, api_seq = ''
			, sitename = #{sitename}
			, indexingdate = NOW()
		WHERE api_id = #{api_id}::TEXT
		AND sitename = #{sitename}
	</update>
	
	<!-- QnA 답변 목록 조회 -->
	<select id="selectQnaAnswerList" parameterType="hashMap" resultType="hashMap"> 
	/* ProdMapper.selectQnaAnswerList */
		SELECT *
		  FROM comm_qna_products_answer
		 WHERE apiindexing = 'N'
		   AND sitename = #{sitename}
	</select>

	<!-- CS QnA 답변 목록 조회 -->
	<select id="selectCsQnaAnswerList" parameterType="hashMap" resultType="hashMap">
		/* ProdMapper.selectCsQnaAnswerList */
		SELECT *
		FROM comm_qna_products_answer
		WHERE apiindexing = 'N'
		  AND sitename = #{sitename}
          AND coalesce(api_seq,'') != ''
	</select>
	
	<!-- QnA 답변 API 정보 수정 -->  
	<update id="updateQnaAnswer" parameterType="hashMap">
	/* ProdMapper.updateQnaAnswer */
		UPDATE comm_qna_products_answer
			SET indexingdate = NOW()
			, apiindexing = 'Y'
		WHERE api_id = #{api_id}::TEXT
		AND sitename = #{sitename}
	</update>
	
	<!-- 셀러 상품삭제건 조회 -->
	<select id="selectSaleStopSellerProduct" parameterType="hashMap" resultType="hashMap">
		/* ProdMapper.selectSaleStopSellerProduct */
		WITH WITH_TABUP AS (
			WITH  WITH_TAB AS (
				SELECT sellercd
					 , 'D' as sellertmon
				  FROM comm_sellers 
				 WHERE tmon IN ('D') 
			)
			SELECT B.*
				 , A.*
			  FROM comm_products A
				 , with_tab B
			 WHERE A.sellercd = B.sellercd
		)
		SELECT C.productno
			 , C.tmon
			 , D.sellertmon
			 , C.productcd
		  FROM tmon_products C
			 , with_tabup D
		 WHERE C.productcd = D.productcd
		   AND coalesce(D.sellertmon,'') != coalesce(C.tmon,'')
		  UNION ALL
		 SELECT np.productno
			  , np.tmon
			  , 'D' as sellertmon
			  , cp.productcd
  		   FROM comm_products cp 
				JOIN tmon_products np on cp.productcd=np.productcd
          WHERE 7000 > cp.supplyprice
            AND cp.status='02'
            AND (np.tmon!='D' or np.tmon is null)
		 limit 1000
	</select>
	
	<select id="selectProductStopSellingList" parameterType="hashMap" resultType="hashMap">
		SELECT np.productno ,cp.productcd ,'D' as sellertmon , cp.sellingprice, cp.supplyprice
		FROM comm_sellers cs
		inner join comm_products cp on cp.sellercd = cs.sellercd
		inner join tmon_products np on np.productcd = cp.productcd 
		<if test='isAppr == "N"'>
			and np.tmon is null
		</if>
		<if test='isAppr == "Y"'>
			and np.tmon = 'B'
		</if>
		WHERE
		<if test='isAppr == "N"'>
			(cs.tmon = 'D' and coalesce(np.tmon,'') != 'D')	--셀러 SSG 연동 해제시
			OR (cs.tmon in ('Y', 'R') and cp.status in ('01', '03', '04') and coalesce(np.tmon ,'') != 'D' and cs.shippingcompanycd is not null and cs.returnaddress1 is not null) --셀러 SSG 연동중이면서 상품이 판매중 아닐때
			OR (cp.supplyprice <![CDATA[<]]> 7000 and coalesce(np.tmon,'') != 'D' and cp.status ='02')---셀러 SSG 연동중이면서 정산가가 7000원 미만
		</if>
		<if test='isAppr == "Y"'>
			(cs.tmon = 'D')	--셀러 SSG 연동 해제시
			OR (cs.tmon in ('Y', 'R') and cp.status in ('01', '03', '04') and cs.shippingcompanycd is not null and cs.returnaddress1 is not null) --셀러 SSG 연동중이면서 상품이 판매중 아닐때
			OR (cp.supplyprice <![CDATA[<]]> 7000 and cp.status ='02')---셀러 SSG 연동중이면서 정산가가 7000원 미만
		</if>
		<if test ="limit != null and limit != ''">
			OFFSET 0 LIMIT #{limit}::NUMERIC 
		</if>
	</select>
	
	<select id="selectStatusSearchList" parameterType="hashMap" resultType="hashMap">
		select np.productno, np.productcd , 'D' as sellertmon , cp.sellingprice ,  cp.supplyprice 
		from tmon_products np
		inner join comm_products cp on np.productcd =cp.productcd 
		where np.tmon = 'D'
		and np.productcd = #{productcd} 
		and ( select sl.content from schedule_log sl where sl.sitename ='SSG' and productcd = #{productcd} order by regdate desc limit 1) not like '%판매중지 조회대상 제외%'
		group by np.productno , np.productcd , sellertmon , cp.sellingprice ,cp.supplyprice 
	</select>
	
	<select id="selectStatusDList" parameterType="hashMap" resultType="hashMap">
		select productcd from tmon_products where tmon = 'D'
	</select>
	
</mapper>
